plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

def mcVersion = project.build_version
String updateName = "$mod_name $mod_version ($mcVersion) $update_name_suffix"

version = "$project.mod_version+$mcVersion"
group = project.maven_group

base {
	archivesName = project.mod_id
}

repositories {
	maven {
		name = 'Terraformers'
		url = 'https://maven.terraformersmc.com/'
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

publishMods {
	file = remapJar.archiveFile
	changelog = rootProject.file("CHANGELOG.md").text
	type = STABLE
	displayName = updateName

	modLoaders.add("fabric")
	version = mod_version

	github {
		accessToken = providers.gradleProperty("secrets.github_token")
		repository = repository_url
		commitish = "master"
		tagName = mod_version
	}

	modrinth {
		accessToken = providers.gradleProperty("secrets.modrinth_token")
		projectId = modrinth_project_id

		for (String version : modrinth_versions.toString().split(' '))
			minecraftVersions.add(version)

		requires("fabric-api")
		optional("sodium")
	}

	discord {
		webhookUrl = providers.gradleProperty("secrets.discord_webhook_url")
		username = "$mod_name Update Tracker"
		content = changelog.map { "# " + updateName + '\n' + it + "\n-# ||<@&1201276927428804741>||" }
	}
}

dependencies {
	minecraft "com.mojang:minecraft:$mcVersion"
	mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
	modRuntimeOnly "com.terraformersmc:modmenu:${modmenu_version}"
	modRuntimeOnly "maven.modrinth:reeses-sodium-options:${reeses_sodium_options_version}+fabric"

	modCompileOnly "maven.modrinth:sodium:${sodium_version}-fabric"

	// Comment this line out if testing in game without sodium
	modRuntimeOnly "maven.modrinth:sodium:${sodium_version}-fabric"
}

def javaVersion = JavaVersion.VERSION_21
def javaVersionNumber = javaVersion.ordinal() + 1

processResources {
	inputs.property("id", project.mod_id)
	inputs.property("name", project.mod_name)
	inputs.property("version", project.mod_version)
	inputs.property("target", project.target_version)
	inputs.property("loader", project.loader_version)
	inputs.property("java_version", javaVersionNumber)

	def map = [
		"id": inputs.properties.id,
		"name": inputs.properties.name,
		"version": inputs.properties.version,
		"target": inputs.properties.target,
		"loader": inputs.properties.loader,
		"java_version": inputs.properties.java_version
	]

	filesMatching("fabric.mod.json") {
		expand map
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = javaVersionNumber
}

loom {
	runs {
		client {
			programArgs(["--username", "axialeaa", "--uuid", "dabdffa7-fdd2-4798-9f94-a518c7856163"])
		}
	}
}

java {
	withSourcesJar()

	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}