plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

def mcVersion = stonecutter.current.version

version = "${property("mod_version")}+$mcVersion"
group = property("maven_group")

base {
	archivesName = property("mod_id")
}

repositories {
	maven {
		name = 'Terraformers'
		url = 'https://maven.terraformersmc.com/'
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

publishMods {
	file = remapJar.archiveFile
	changelog = rootProject.file("CHANGELOG.md").text
	type = STABLE

	StringBuilder builder = new StringBuilder("${property("mod_name")} ${property("mod_version")} ($mcVersion)")

	def updateName = property("update_name")

	if (!updateName.toString().isBlank())
		builder.append(" - $updateName")

	displayName = builder.toString()

	modLoaders.add("fabric")
	version = property("mod_version")

	modrinth {
		accessToken = providers.gradleProperty("secrets.modrinth_token")
		projectId = property("modrinth_project_id")

		for (String version : property("modrinth_versions").toString().split(' '))
			minecraftVersions.add(version)

		requires("fabric-api")
		optional("sodium")
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:$mcVersion"
	mappings "net.fabricmc:yarn:${property("yarn_mappings")}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property("loader_version")}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${property("fabric_version")}"
	modRuntimeOnly "com.terraformersmc:modmenu:${property("modmenu_version")}"

	modCompileOnly "maven.modrinth:sodium:${property("sodium_version")}"

	// Comment this line out if testing in game without sodium
	modRuntimeOnly "maven.modrinth:sodium:${property("sodium_version")}"
}

stonecutter {
	swap("mod_id", "\"${property("mod_id")}\";")
	swap("mod_name", "\"${property("mod_name")}\";")

	def sodiumPackage = eval(mcVersion, ">=1.21.1") ? "net.caffeinemc" : "me.jellysquid"

	swap("sodium_package", sodiumPackage)
	swap("quality_target", "\"L%s/mods/sodium/client/gui/options/OptionGroup;createBuilder()L%<s/mods/sodium/client/gui/options/OptionGroup\$Builder;\"".formatted(sodiumPackage.replace('.', '/')))
}

JavaVersion javaVersion = stonecutter.eval(mcVersion, ">=1.20.6") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
int javaVersionNumber = javaVersion.ordinal() + 1

tasks.register('copyBuild', Copy) {
	from("${layout.buildDirectory.get()}/libs")
	into("$rootDir/libs/${project.property("mod_version")}")
}

tasks.build.finalizedBy("copyBuild")

processResources {
	inputs.property("id", project.property("mod_id"))
	inputs.property("name", project.property("mod_name"))
	inputs.property("version", project.property("mod_version"))
	inputs.property("target", project.property("target_version"))
	inputs.property("java_version", javaVersionNumber)

	def map = [
		"id": project.property("mod_id"),
		"name": project.property("mod_name"),
		"version": project.property("mod_version"),
		"target": project.property("target_version"),
		"java_version": javaVersionNumber
	]

	filesMatching("fabric.mod.json") {
		expand map
	}

	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = javaVersionNumber
}

if (stonecutter.current.isActive) {
	rootProject.tasks.register("runActiveClient") {
		group = "fabric"
		dependsOn(tasks.named("runClient"))
	}

	loom {
		runs {
			client {
				programArgs(["--username", "axialeaa", "--uuid", "dabdffa7-fdd2-4798-9f94-a518c7856163"])
			}
		}
		runConfigs.all {
			ideConfigGenerated = true
			vmArgs("-Dmixin.debug.export=true")
			runDir "../../run"
		}
	}
}

java {
	withSourcesJar()

	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}